/******************************************************************************
 * Student Name    :
 * RMIT Student ID :
 * COURSE CODE     :
 *
 * Startup code provided by Paul Miller for use in "Programming in C",
 * study period 2, 2018.
 *****************************************************************************/

#include "tile_list.h"

/******************************************************************************
 * the tile list module manages the tile list which might behave like a tile map
 * (mapping between a letter and a score) or it might be a list which that can
 * be added to or deleted from (such as a tile deck or tile hand). You are
 *required to create the functions for this list.
 *****************************************************************************/
FILE* tokenise_tokens(FILE* file) {
    char buffer[BUFFER_SIZE];
    char* token;

    /* Error checking*/
    if (file == NULL) {
        error_print("Unable to open %s file\n", file);
        return FALSE;
    } else {
        while (fgets(buffer, BUFFER_SIZE, file) != NULL) {
            token = strtok(buffer, DELIMS);
            while (token != NULL) {
                /* Debugging */
                /*normal_print("%s\n", token);*/
                token = strtok(NULL, DELIMS);
            }
        }
    }
    fclose(file);
    return file;
}

/* Source code adapted from...*/

BOOLEAN init_tilelist(struct tile_list* tilelist) {
    tilelist->tiles = (struct tile*)malloc(sizeof(struct tile) * 10);
    /* Error checking */
    if (!tilelist->tiles) {
        error_print("Failed to allocate tile memory.\n");
        return EXIT_FAILURE;
    }
    tilelist->num_tiles = 0;
    tilelist->total_tiles = 10;
    return EXIT_SUCCESS;
}

BOOLEAN add_tiles(struct tile_list* tilelist, struct tile tiles) {
    int count;
    if (tilelist->num_tiles == tilelist->total_tiles) {
        void* test = (struct tile*)realloc(
            tilelist->tiles, DOUBLE(tilelist->num_tiles) * sizeof(struct tile));
        if (!test) {
            error_print("Failed to reallocate.\n");
            return EXIT_FAILURE;
        }
        tilelist->tiles = test;
        tilelist->total_tiles = DOUBLE(tilelist->total_tiles);
    }
    for (count = 0; count < tilelist->num_tiles; count++) {
        int back_count;
        for (back_count = tilelist->num_tiles; back_count > count;
             back_count--) {
            tilelist->tiles[count] = tiles;
            tilelist++->num_tiles;
            return EXIT_SUCCESS;
        }
    }
    tilelist->
}
